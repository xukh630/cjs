<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置 -->
    <properties resource="generator/generator.properties"/>
    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <context id="mysql" targetRuntime="MyBatis3">
        <!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--自动序列化   -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!--生成tostring方法-->
        <!--<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />-->
        <!--生成equals与hashCode实现-->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />-->
        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator type="com.jcs.plugin.MyCommentGenerator">
            <property name="suppressAllComments" value="false"/>
            <property name="suppressDate" value="false"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.connectionURL}"
                        userId="${jdbc.userId}" password="${jdbc.password}">

            <property name="nullCatalogMeansCurrent" value="true"/>
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver type="com.jcs.plugin.MyJavaTypeResolver">
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="${model.package}" targetProject="${model.project}">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
            <!-- 给Model添加一个父类 -->
            <!--<property name="rootClass" value="com.example.khplugin.base.BaseModel" />-->
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 -->
        <sqlMapGenerator targetPackage="${mapper.xml.package}" targetProject="${mapper.xml.project}">
            <property name="enableSubPackages" value="false"/>
            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 -->
            <!--<property name="rootInterface" value="com.example.khplugin.base.BaseMapper"/>-->
        </sqlMapGenerator>

        <javaClientGenerator targetPackage="${mapper.impl.package}"
                             targetProject="${mapper.impl.project}" type="XMLMAPPER">
            <property name="enableSubPackages" value=""/>
            <property name="exampleMethodVisibility" value=""/>
            <property name="methodNameCalculator" value=""/>
            <property name="rootInterface" value=""/>
        </javaClientGenerator>

        <table tableName="yy_driver" domainObjectName="DriverRoute"

               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false"
        >
        </table>
    </context>
</generatorConfiguration>
